[{"C:\\Users\\paloh\\Documents\\GitHub\\LCC-Proyecto\\src\\index.js":"1","C:\\Users\\paloh\\Documents\\GitHub\\LCC-Proyecto\\src\\Game.js":"2","C:\\Users\\paloh\\Documents\\GitHub\\LCC-Proyecto\\src\\PengineClient.js":"3","C:\\Users\\paloh\\Documents\\GitHub\\LCC-Proyecto\\src\\Board.js":"4","C:\\Users\\paloh\\Documents\\GitHub\\LCC-Proyecto\\src\\Square.js":"5"},{"size":177,"mtime":1649370600000,"results":"6","hashOfConfig":"7"},{"size":9250,"mtime":1654657668885,"results":"8","hashOfConfig":"7"},{"size":2201,"mtime":1649370600000,"results":"9","hashOfConfig":"7"},{"size":795,"mtime":1654561018133,"results":"10","hashOfConfig":"7"},{"size":424,"mtime":1651767598150,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1r56h6d",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\paloh\\Documents\\GitHub\\LCC-Proyecto\\src\\index.js",[],["25","26"],"C:\\Users\\paloh\\Documents\\GitHub\\LCC-Proyecto\\src\\Game.js",["27"],"import React from 'react';\r\nimport PengineClient from './PengineClient';\r\nimport Board from './Board';\r\n\r\n/**\r\n * Lista de colores.\r\n */\r\n\r\nconst colors = [\"r\", \"v\", \"p\", \"g\", \"b\", \"y\"];  // red, violet, pink, green, blue, yellow\r\n\r\n/**\r\n * Lista de tipos de grillas.\r\n */\r\n\r\nconst grillas = [1, 2, 3];\r\n\r\n/**\r\n * Devuelve la representaciÃ³n CSS del color recibido.\r\n */\r\n\r\nexport function colorToCss(color) {\r\n  switch (color) {\r\n    case \"r\": return \"#cc2a2a\";\r\n    case \"v\": return \"#b33078\";\r\n    case \"p\": return \"#ee9696\";\r\n    case \"g\": return \"#3f9138\";\r\n    case \"b\": return \"#636bd3\";\r\n    case \"y\": return \"#e7da25\";\r\n  }\r\n  return color;\r\n}\r\nclass Game extends React.Component {\r\n\r\n  pengine;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      turns: 0, // cantidad de turnos realizados \r\n      grid: null, // grilla del juego\r\n      longitud: 1, // longitud de la lista de adyacentesC\r\n      history: [], // representa el historial de jugadas\r\n      complete: false,  // verdadero si se completo el juego, falso en caso contrario\r\n      waiting: false, // verdadero se esta esperando una respuesta, falso en caso contrario\r\n      playing: false, // verdadero si se esta jugando una partida, falso en caso contrario\r\n      adyacentesC: null, // lista de las celdas adyacentesC\r\n      numGrid: 1, // numero asociado a una cierta grilla (por defecto es la numero 1)\r\n      gridSelected: false, //verdadero si se confirmo la seleccion de una grilla, falso en caso contrario\r\n      profundidad: 0,\r\n      solucion: [],\r\n      adySolucion: 0\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handlePengineCreate = this.handlePengineCreate.bind(this);\r\n    this.pengine = new PengineClient(this.handlePengineCreate);\r\n  }\r\n\r\n  /*\r\n  * Metodo que inicializa una grilla en base a un numero, a traves de una consulta a Prolog\r\n  * numGrid: numero asociado a una cierta grilla \r\n  * */\r\n  handlePengineCreate(numGrid) {\r\n    var queryS = 'init1(Grid, LAdyacentes)';\r\n\r\n    if (numGrid === 2) {\r\n      queryS = 'init2(Grid, LAdyacentes)';\r\n    }\r\n    if (numGrid === 3) {\r\n      queryS = 'init3(Grid, LAdyacentes)';\r\n    }\r\n\r\n    this.pengine.query(queryS, (success, response) => {\r\n      if (success) {\r\n        this.setState({\r\n          grid: response['Grid'],\r\n          adyacentesC: response['LAdyacentes']\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /*\r\n  * Metodo que actualiza la grilla en base a un color seleccionado\r\n  */\r\n  handleClick(color) {\r\n    //Si el juego esta completo o esta esperando alguna respuesta, no realiza nada.\r\n    if (this.state.complete || this.state.waiting) {\r\n      return;\r\n    }\r\n\r\n    if (this.state.playing === false) {\r\n      this.setState({\r\n        playing: true,\r\n        gridSelected: true\r\n      })\r\n    }\r\n    // Ejemplo de como realizar la consulta flick a Prolog:\r\n    // flick([[g,g,b,g,v,y,p,v,b,p,v,p,v,r],\r\n    //        [r,r,p,p,g,v,v,r,r,b,g,v,p,r],\r\n    //        [b,v,g,y,b,g,r,g,p,g,p,r,y,y],\r\n    //        [r,p,y,y,y,p,y,g,r,g,y,v,y,p],\r\n    //        [y,p,y,v,y,g,g,v,r,b,v,y,r,g],\r\n    //        [r,b,v,g,b,r,y,p,b,p,y,r,y,y],\r\n    //        [p,g,v,y,y,r,b,r,v,r,v,y,p,y],\r\n    //        [b,y,v,g,r,v,r,g,b,y,b,y,p,g],\r\n    //        [r,b,b,v,g,v,p,y,r,v,r,y,p,g],\r\n    //        [v,b,g,v,v,r,g,y,b,b,b,b,r,y],\r\n    //        [v,v,b,r,p,b,g,g,p,p,b,y,v,p],\r\n    //        [r,p,g,y,v,y,r,b,v,r,b,y,r,v],\r\n    //        [r,b,b,v,p,y,p,r,b,g,p,y,b,r],\r\n    //        [v,g,p,b,v,v,g,g,g,b,v,g,g,g]],r, Grid)\r\n\r\n    const gridS = JSON.stringify(this.state.grid).replaceAll('\"', \"\");\r\n\r\n    const aux = JSON.stringify(this.state.adyacentesC).replaceAll('\"', \"\");\r\n    const queryS = `flick(${gridS}, ${color} , ${aux} , Grid, FAdyacentesC)`;\r\n\r\n    this.setState({\r\n      waiting: true\r\n    });\r\n\r\n    this.pengine.query(queryS, (success, response) => {\r\n      //si la consulta es exitosa (es decir, el color seleccionado no coincide con el color de adyacentesC)\r\n      if (success) {\r\n        this.setState({\r\n          grid: response['Grid'],\r\n          adyacentesC: response['FAdyacentesC'],\r\n          turns: this.state.turns + 1,\r\n          waiting: false\r\n        });\r\n        (this.state.history).push(color);\r\n      } else { //si la consulta no es exitosa (caso contrario)\r\n        this.setState({\r\n          waiting: false\r\n        });\r\n      }\r\n      this.setState({\r\n        longitud: this.state.adyacentesC.length\r\n      });\r\n      //si la longitud de la lista de adyacentesC es igual a la cantidad de celdas de la grilla \r\n      if (this.state.longitud === (this.state.grid.length * this.state.grid[0].length)) {\r\n        this.setState({\r\n          complete: true\r\n        })\r\n      }\r\n    });\r\n  }\r\n\r\n  // Metodo que reinicia todas las propiedades del juego e inicializa la grilla por defecto\r\n  reiniciarJuego() {\r\n    this.setState({\r\n      turns: 0,\r\n      longitud: 1,\r\n      history: [],\r\n      complete: false,\r\n      waiting: false,\r\n      playing: false,\r\n      numGrid: 1,\r\n      gridSelected: false\r\n    })\r\n    this.handlePengineCreate(this.state.numGrid);\r\n  }\r\n\r\n  help(){\r\n    if (this.state.complete || this.state.waiting) {\r\n      return;\r\n    }\r\n\r\n    const gridS = JSON.stringify(this.state.grid).replaceAll('\"', \"\");\r\n    const aux = JSON.stringify(this.state.adyacentesC).replaceAll('\"', \"\");\r\n    const queryS = `help(${gridS},${aux},${this.state.profundidad}, Solucion, CantAdy)`;\r\n    \r\n    this.setState({\r\n      waiting: true\r\n    });\r\n\r\n    this.pengine.query(queryS, (success, response) => {\r\n      if (success) {\r\n        this.setState({\r\n          solucion: response['Solucion'],\r\n          adySolucion: response['CantAdy'],\r\n          waiting: false\r\n        });\r\n       console.log(this.state.solucion); \r\n      } else { //si la consulta no es exitosa (caso contrario)\r\n        this.setState({\r\n          waiting: false\r\n        });\r\n      }\r\n      this.setState({\r\n        longitud: this.state.adyacentesC.length\r\n      });\r\n  });\r\n}\r\n\r\n  handleChange(event){\r\n    this.setState({profundidad: event.target.value});\r\n  }\r\n\r\n  render() {\r\n    if (this.state.grid === null) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"leftPanel\">\r\n          <div className=\"buttonsPanel\">\r\n            {colors.map(color =>\r\n              <button\r\n                className=\"colorBtn\"\r\n                style={{ backgroundColor: colorToCss(color) }}\r\n                onClick={() => this.handleClick(color)}\r\n                key={color}\r\n              />)}\r\n          </div>\r\n          <div className=\"turnsPanel\">\r\n            <div className=\"turnsLab\">Turnos</div>\r\n            <div className=\"turnsNum\">{this.state.turns}</div>\r\n          </div>\r\n          <div className=\"longPanel\">\r\n            <div className=\"longLab\">Celdas capturadas</div>\r\n            <div className=\"longNum\">{this.state.longitud}</div>\r\n          </div>\r\n          <div className= \"helpPanel\">\r\n            <div className= \"strategyLab\">Seleccionar Profundidad</div>\r\n            <input className=\"strategyNum\" type='number' min='0' max='20' value={this.state.profundidad} onChange={(e) => this.setState({profundidad: e.target.value})}/>\r\n            <button className= 'help'\r\n            onClick={() => this.help()}\r\n            >Ayuda</button>\r\n          </div>\r\n          {this.state.gridSelected === false &&\r\n            <div className=\"menuPanel\">\r\n              <div className='menuGrilla'> Seleccionar grilla </div>\r\n              {grillas.map(grilla =>\r\n                <button\r\n                  className=\"menu\"\r\n                  onClick={() => this.handlePengineCreate(grilla)}\r\n                > {grilla} </button>)}\r\n              <button className='menu'\r\n                onClick={() =>\r\n                  this.setState({\r\n                    gridSelected: true\r\n                  })}\r\n              > Seleccionar </button>\r\n            </div>\r\n          }\r\n          \r\n        </div>\r\n        <Board\r\n          grid={this.state.grid}\r\n          onOriginSelected={this.state.playing ? undefined :\r\n            origin => {\r\n              this.setState({\r\n                playing: true,\r\n                adyacentesC: [origin],\r\n                gridSelected: true\r\n              })\r\n            }\r\n          }\r\n          origin={this.state.adyacentesC ? this.state.adyacentesC[0] : undefined}\r\n          \r\n        />\r\n        <div className=\"rightPanel\">\r\n          <div className=\"historialPanel\">\r\n            <div className=\"historialLab\">Historial de jugadas</div>\r\n            <div className=\"cellsPanel\">\r\n            {(this.state.history).map(color =>\r\n              <button\r\n                className=\"cells\"\r\n                style={{ backgroundColor: colorToCss(color) }}\r\n                key={color}\r\n              />)}\r\n            </div>\r\n          </div>\r\n          </div>\r\n       \r\n        {this.state.complete &&\r\n          <div className={\"won\"}>\r\n            <span class=\"wonText\">\r\n              JUEGO COMPLETADO\r\n            </span>\r\n            <button className=\"reiniciarBtn\"\r\n              onClick={() => this.reiniciarJuego()}>\r\n              Reiniciar\r\n            </button>\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","C:\\Users\\paloh\\Documents\\GitHub\\LCC-Proyecto\\src\\PengineClient.js",[],"C:\\Users\\paloh\\Documents\\GitHub\\LCC-Proyecto\\src\\Board.js",[],"C:\\Users\\paloh\\Documents\\GitHub\\LCC-Proyecto\\src\\Square.js",[],["28","29"],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":22,"column":3,"nodeType":"36","messageId":"37","endLine":29,"endColumn":4},{"ruleId":"30","replacedBy":"38"},{"ruleId":"32","replacedBy":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["40"],["41"],"no-global-assign","no-unsafe-negation"]