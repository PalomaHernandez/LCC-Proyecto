[{"E:\\Eze\\Logica\\LCC-Proyecto\\LCC-Proyecto\\src\\index.js":"1","E:\\Eze\\Logica\\LCC-Proyecto\\LCC-Proyecto\\src\\Game.js":"2","E:\\Eze\\Logica\\LCC-Proyecto\\LCC-Proyecto\\src\\PengineClient.js":"3","E:\\Eze\\Logica\\LCC-Proyecto\\LCC-Proyecto\\src\\Board.js":"4","E:\\Eze\\Logica\\LCC-Proyecto\\LCC-Proyecto\\src\\Square.js":"5"},{"size":186,"mtime":1650467857537,"results":"6","hashOfConfig":"7"},{"size":6673,"mtime":1651689566235,"results":"8","hashOfConfig":"7"},{"size":2276,"mtime":1650467857534,"results":"9","hashOfConfig":"7"},{"size":786,"mtime":1651685176463,"results":"10","hashOfConfig":"7"},{"size":425,"mtime":1651614554721,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1vldrrs",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"E:\\Eze\\Logica\\LCC-Proyecto\\LCC-Proyecto\\src\\index.js",[],["25","26"],"E:\\Eze\\Logica\\LCC-Proyecto\\LCC-Proyecto\\src\\Game.js",["27"],"import React from 'react';\r\nimport PengineClient from './PengineClient';\r\nimport Board from './Board';\r\n\r\n/**\r\n * List of colors.\r\n */\r\n\r\nconst colors = [\"r\", \"v\", \"p\", \"g\", \"b\", \"y\"];  // red, violet, pink, green, blue, yellow\r\n\r\nconst grillas = [1, 2, 3];\r\n\r\n/**\r\n * Returns the CSS representation of the received color.\r\n */\r\n\r\nexport function colorToCss(color) {\r\n  switch (color) {\r\n    case \"r\": return \"#cc2a2a\";\r\n    case \"v\": return \"#b33078\";\r\n    case \"p\": return \"#ee9696\";\r\n    case \"g\": return \"#3f9138\";\r\n    case \"b\": return \"#636bd3\";\r\n    case \"y\": return \"#e7da25\";\r\n  }\r\n  return color;\r\n}\r\nclass Game extends React.Component {\r\n\r\n  pengine;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      turns: 0,\r\n      grid: null,\r\n      longitud: 1,\r\n      history: [],\r\n      complete: false,  // true if game is complete, false otherwise\r\n      waiting: false,\r\n      playing: false,\r\n      adyacentesC: null,\r\n      numGrid: 1,\r\n      gridSelected: false\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handlePengineCreate = this.handlePengineCreate.bind(this);\r\n    this.pengine = new PengineClient(this.handlePengineCreate);\r\n  }\r\n\r\n  handlePengineCreate(numGrid) {\r\n\r\n    if (this.state.gridSelected || this.state.playing)\r\n      return;\r\n\r\n    var queryS = 'init1(Grid, LAdyacentes)';\r\n\r\n    if (numGrid === 2) {\r\n      queryS = 'init2(Grid, LAdyacentes)';\r\n    }\r\n    if (numGrid === 3) {\r\n      queryS = 'init3(Grid, LAdyacentes)';\r\n    }\r\n\r\n    this.pengine.query(queryS, (success, response) => {\r\n      if (success) {\r\n        this.setState({\r\n          grid: response['Grid'],\r\n          adyacentesC: response['LAdyacentes']\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  handleClick(color) {\r\n    // No action on click if game is complete or we are waiting.\r\n    if (this.state.complete || this.state.waiting) {\r\n      return;\r\n    }\r\n    if (this.state.playing === false) {\r\n      this.setState({\r\n        playing: true,\r\n        gridSelected: true\r\n      })\r\n    }\r\n    // Build Prolog query to apply the color flick.\r\n    // The query will be like:\r\n    // flick([[g,g,b,g,v,y,p,v,b,p,v,p,v,r],\r\n    //        [r,r,p,p,g,v,v,r,r,b,g,v,p,r],\r\n    //        [b,v,g,y,b,g,r,g,p,g,p,r,y,y],\r\n    //        [r,p,y,y,y,p,y,g,r,g,y,v,y,p],\r\n    //        [y,p,y,v,y,g,g,v,r,b,v,y,r,g],\r\n    //        [r,b,v,g,b,r,y,p,b,p,y,r,y,y],\r\n    //        [p,g,v,y,y,r,b,r,v,r,v,y,p,y],\r\n    //        [b,y,v,g,r,v,r,g,b,y,b,y,p,g],\r\n    //        [r,b,b,v,g,v,p,y,r,v,r,y,p,g],\r\n    //        [v,b,g,v,v,r,g,y,b,b,b,b,r,y],\r\n    //        [v,v,b,r,p,b,g,g,p,p,b,y,v,p],\r\n    //        [r,p,g,y,v,y,r,b,v,r,b,y,r,v],\r\n    //        [r,b,b,v,p,y,p,r,b,g,p,y,b,r],\r\n    //        [v,g,p,b,v,v,g,g,g,b,v,g,g,g]],r, Grid)\r\n\r\n    const gridS = JSON.stringify(this.state.grid).replaceAll('\"', \"\");\r\n\r\n    const aux = JSON.stringify(this.state.adyacentesC).replaceAll('\"', \"\");\r\n    const queryS = `flick(${gridS}, ${color} , ${aux} , Grid, FAdyacentesC)`;\r\n\r\n\r\n    //const queryS = \"flick(\" + gridS + \",\" + color + \",[[0,0]],Grid)\";\r\n    console.log(queryS);\r\n\r\n    this.setState({\r\n      waiting: true\r\n    });\r\n\r\n    this.pengine.query(queryS, (success, response) => {\r\n      if (success) {\r\n        console.log(\"no fallo consulta\");\r\n        this.setState({\r\n          grid: response['Grid'],\r\n          adyacentesC: response['FAdyacentesC'],\r\n          turns: this.state.turns + 1,\r\n          waiting: false\r\n        });\r\n        (this.state.history).push(color);\r\n      } else {\r\n        console.log(\"fallo consulta\");\r\n        // Prolog query will fail when the clicked color coincides with that in the top left cell.\r\n        this.setState({\r\n          waiting: false\r\n        });\r\n      }\r\n      this.setState({\r\n        longitud: this.state.adyacentesC.length\r\n      });\r\n      \r\n      const cantFilas= this.state.grid.length;\r\n      const cantCol= this.state.grid[0].length;\r\n      \r\n      if (this.state.longitud === cantFilas * cantCol) {\r\n        this.setState({\r\n          complete: true\r\n        })\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.grid === null) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"leftPanel\">\r\n          <div className=\"buttonsPanel\">\r\n            {colors.map(color =>\r\n              <button\r\n                className=\"colorBtn\"\r\n                style={{ backgroundColor: colorToCss(color) }}\r\n                onClick={() => this.handleClick(color)}\r\n                key={color}\r\n              />)}\r\n          </div>\r\n          <div className=\"turnsPanel\">\r\n            <div className=\"turnsLab\">Turnos</div>\r\n            <div className=\"turnsNum\">{this.state.turns}</div>\r\n          </div>\r\n          <div className=\"longPanel\">\r\n            <div className=\"longLab\">Celdas capturadas</div>\r\n            <div className=\"longNum\">{this.state.longitud}</div>\r\n          </div>\r\n          {this.state.gridSelected === false &&\r\n          <div className=\"menuPanel\">\r\n            <div className='menuGrilla'> Cambiar grilla </div>\r\n            {grillas.map(grilla =>\r\n              <button\r\n                className=\"menu\"\r\n                onClick={() => this.handlePengineCreate(grilla)}\r\n              > {grilla} </button>)}\r\n            <button className='menu'\r\n              onClick={() => \r\n                this.setState({\r\n                  gridSelected: true\r\n                })}\r\n            >\r\n              Seleccionar grilla\r\n            </button>\r\n          </div>\r\n          }\r\n        </div>\r\n        <Board\r\n          grid={this.state.grid}\r\n          onOriginSelected={this.state.playing? undefined :\r\n            origin => {\r\n              this.setState({\r\n                playing: true,\r\n                adyacentesC: [origin],\r\n                gridSelected: true\r\n              })\r\n            }\r\n          }\r\n          origin={this.state.adyacentesC ? this.state.adyacentesC[0] : undefined}\r\n        />\r\n        <div className=\"rightPanel\">\r\n          <div className=\"historialPanel\">\r\n            <div className=\"historialLab\">Historial de jugadas</div>\r\n          </div>\r\n          <div className=\"cellsPanel\">\r\n            {(this.state.history).map(color =>\r\n              <button\r\n                className=\"cells\"\r\n                style={{ backgroundColor: colorToCss(color) }}\r\n                key={color}\r\n              />)}\r\n          </div>\r\n        </div>\r\n        {this.state.complete &&\r\n          <div className={\"won\"}>\r\n            <span class=\"wonText\">\r\n              JUEGO COMPLETADO\r\n            </span>\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","E:\\Eze\\Logica\\LCC-Proyecto\\LCC-Proyecto\\src\\PengineClient.js",[],"E:\\Eze\\Logica\\LCC-Proyecto\\LCC-Proyecto\\src\\Board.js",[],"E:\\Eze\\Logica\\LCC-Proyecto\\LCC-Proyecto\\src\\Square.js",[],["28","29"],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":18,"column":3,"nodeType":"36","messageId":"37","endLine":25,"endColumn":4},{"ruleId":"30","replacedBy":"38"},{"ruleId":"32","replacedBy":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["40"],["41"],"no-global-assign","no-unsafe-negation"]